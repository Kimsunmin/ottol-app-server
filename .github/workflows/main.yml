name: OTTOL-SERVER-CICD

env:
  REGISTRY: ghcr.io
  DOCKER_IMAGE: kimsunmin/ottol-server
  DOCKER_CONTAINER: ottol-server
  VERSION: ${{ github.sha }}

# 트리거를 수행할 브랜치르 지정
on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Setup node.js 18.16.0
        uses: actions/setup-node@v3 
        with: 
          node-version: 18.16.0
      - name: Install pnpm
        run: npm i -g pnpm
      - name: Install node packeage
      - run: pnpm install

  build:
      needs: test
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v2 
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.OTTOL_TOKEN }}
      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          bulider: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
          
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-go ]
  
    steps:
    - name: Login to ghcr
      uses: docker/login-action@v2 
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.OTTOL_TOKEN }}
    - name: Run docker
      run: |
        echo "PORT=${{ secrets.PORT }}" >> .env.prod
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.prod
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.prod
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.prod
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.prod
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.prod
        echo "LOTTO_API_BASE_URL=${{ secrets.LOTTO_API_BASE_URL }}" >> .env.prod
        echo "LOTTO_API_METHOD=${{ secrets.LOTTO_API_METHOD }}" >> .env.prod
        echo "LOTTO_API_GUBUN=${{ secrets.LOTTO_API_GUBUN }}" >> .env.prod
        cat .env.prod
        docker stop ${{ env.DOCKER_CONTAINER }} && docker rm ${{ env.DOCKER_CONTAINER }} && docker rmi ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest 
        docker run --env-file ./.env.prod -d -p 3000:3000 --name ${{ env.DOCKER_CONTAINER }} --restart always ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
